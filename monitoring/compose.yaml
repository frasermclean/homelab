name: monitoring

services:
  # Prometheus metrics server
  prometheus:
    image: prom/prometheus:v3.6.0
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
      - --storage.tsdb.retention.time=7d
      - --storage.tsdb.retention.size=2GB
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - prometheus-data:/prometheus
    networks:
      - default
      - core
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)
      - traefik.http.routers.prometheus.tls.certresolver=cloudflare
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
      - traefik.docker.network=core

  # Node exporter for Prometheus
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    pid: host
    network_mode: host
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/rootfs:ro'

  # Grafana dashboard and visualization tool
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - default
      - core
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
      - traefik.http.routers.grafana.tls.certresolver=cloudflare
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.docker.network=core

volumes:
  prometheus-data:
    name: prometheus-data
  grafana-data:
    name: grafana-data

networks:
  default:
    name: monitoring
    driver: bridge
  core:
    external: true
