name: core

services:
  # Homepage personal dashboards
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: unless-stopped
    networks:
      - default
      - shared
      - frontend
    volumes:
      - ${HOST_APPDATA}/homepage/config:/app/config
      - ${HOST_APPDATA}/homepage/images:/app/public/images
    environment:
      - HOMEPAGE_ALLOWED_HOSTS=${DOMAIN}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - traefik.enable=true
      - traefik.http.routers.homepage.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.homepage.tls.certresolver=cloudflare
      - traefik.http.routers.homepage.middlewares=authentik@file
      - traefik.http.services.homepage.loadbalancer.server.port=3000
      - traefik.docker.network=core

  # AdGuard Home for DNS filtering
  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    restart: unless-stopped
    ports:
      - 53:53/tcp
      - 53:53/udp
    volumes:
      - ${HOST_APPDATA}/adguardhome/conf:/opt/adguardhome/conf
      - ${HOST_APPDATA}/adguardhome/work:/opt/adguardhome/work
    labels:
      - traefik.enable=true
      - traefik.http.routers.adguardhome.rule=Host(`adguard.${DOMAIN}`)
      - traefik.http.routers.adguardhome.tls.certresolver=cloudflare
      - traefik.http.services.adguardhome.loadbalancer.server.port=80
      - homepage.group=Core
      - homepage.name=AdGuard Home
      - homepage.description=Ad Blocking and DNS filtering
      - homepage.icon=adguard-home
      - homepage.href=https://adguard.${DOMAIN}
      - homepage.widget.type=adguard
      - homepage.widget.url=http://adguardhome
      - homepage.widget.username=${ADGUARDHOME_USERNAME}
      - homepage.widget.password=${ADGUARDHOME_PASSWORD}

  # Traefik reverse proxy
  traefik:
    image: traefik:v3.5
    container_name: traefik
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
    networks:
      - default
      - shared
      - backend
      - frontend
    ports:
      - 7000:7000 # Dashboard
      - 80:80 # HTTP
      - 443:443 # HTTPS
    volumes:
      - ${HOST_APPDATA}/traefik:/etc/traefik
      - /var/log/traefik:/var/log/traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver=cloudflare
      - traefik.http.routers.traefik.middlewares=local-ip-whitelist@file,authentik@file
      - traefik.docker.network=core
      - homepage.group=Core
      - homepage.description=Reverse proxy
      - homepage.name=Traefik
      - homepage.icon=traefik
      - homepage.href=https://traefik.${DOMAIN}
      - homepage.widget.type=traefik
      - homepage.widget.url=http://traefik:7000

  # Docker socket proxy
  socket-proxy:
    image: lscr.io/linuxserver/socket-proxy:latest
    container_name: socket-proxy
    restart: unless-stopped
    environment:
      - CONTAINERS=1
      - EVENTS=1
    networks:
      - shared
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    read_only: true
    tmpfs:
      - /run

  # pgAdmin web interface for Postgres
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - default
      - shared
    volumes:
      - ${HOST_APPDATA}/pgadmin/config/config_local.py:/pgadmin4/config_local.py:ro
      - ${HOST_APPDATA}/pgadmin/data:/var/lib/pgadmin
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN}`)
      - traefik.http.routers.pgadmin.tls.certresolver=cloudflare
      - traefik.docker.network=shared

  # Backrest backup solution
  backrest:
    image: garethgeorge/backrest:latest
    container_name: backrest
    restart: unless-stopped
    volumes:
      - ${HOST_APPDATA}/backrest/data:/data
      - ${HOST_APPDATA}/backrest/config:/config
      - ${HOST_APPDATA}/backrest/cache:/cache
      - ${HOST_APPDATA}/backrest/tmp:/tmp
      - ${HOST_APPDATA}:/share/AppData # Mount local paths to backup
    environment:
      - BACKREST_DATA=/data
      - BACKREST_CONFIG=/config/config.json
      - XDG_CACHE_HOME=/cache
      - TMPDIR=/tmp
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.backrest.rule=Host(`backrest.${DOMAIN}`)
      - traefik.http.routers.backrest.tls.certresolver=cloudflare
      - traefik.http.services.backrest.loadbalancer.server.port=9898

  speedtest-tracker:
    image: lscr.io/linuxserver/speedtest-tracker:latest
    container_name: speedtest-tracker
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - APP_KEY=${STT_APP_KEY}
      - DB_CONNECTION=pgsql
      - DB_HOST=${STT_DB_HOST}
      - DB_PORT=5432
      - DB_DATABASE=speedtest_tracker
      - DB_USERNAME=speedtest_tracker
      - DB_PASSWORD=${STT_DB_PASSWORD}
      - DISPLAY_TIMEZONE=${TZ}
      - SPEEDTEST_SCHEDULE=0 5 * * *
      - SPEEDTEST_SERVERS=5935
    volumes:
      - ${HOST_APPDATA}/speedtest-tracker:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.speedtest-tracker.rule=Host(`speedtest.${DOMAIN}`)
      - traefik.http.routers.speedtest-tracker.tls.certresolver=cloudflare
      - traefik.http.services.speedtest-tracker.loadbalancer.server.port=80
      - homepage.group=Core
      - homepage.name=Speedtest Tracker
      - homepage.description=Internet speed logging and monitoring
      - homepage.icon=speedtest-tracker
      - homepage.href=https://speedtest.${DOMAIN}
      - homepage.widget.type=speedtest
      - homepage.widget.url=http://speedtest-tracker
      - homepage.widget.version=2
      - homepage.widget.key=${STT_API_KEY}
      - homepage.widget.bitratePrecision=2

networks:
  default:
    name: core
    driver: bridge
  shared:
    external: true
  backend:
    external: true
  frontend:
    external: true
